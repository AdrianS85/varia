##############################################################
##############################################################
##############################################################



library(tidyverse)



##############################################
##### LOAD INPUT. BEWARE OF FILE FORMAT. ##### 
##############################################

### Sadly, "numeric" columns may contain both . and , as decimary separator. Hence we need to load them as char, replace all , with . change into numeric and only then we have nice input. Also: format of input data is: single file, multiple columns, at least Paper, Experiment, Probe_ID, logFC.
PRE_DATA <- readr::read_tsv("G1.txt", col_types = "nccccccccccccccc", locale = readr::locale(decimal_mark = ","))

PRE_DATA[8:12] <- lapply(X = PRE_DATA[8:12], FUN = function(x) { stringr::str_replace(string = x, pattern = ",", replacement = ".")}) ### !!! THIS IS VERY COOL CONSTRUCT THAT I NEED TO NOTE!!

PRE_DATA[8:12] <- lapply(PRE_DATA[8:12], as.numeric)

##############################################
##### LOAD INPUT. BEWARE OF FILE FORMAT. ##### 
##############################################



#################################################
##### ANNOTATE PROBE_IDs WITH ENSEMBL NAMES #####
#################################################



##### PREPARING LISTS TO BE USED ##### 

### List of species names 
##### !!! THIS NEEDS TO BE MANUALLY ESTABLISHED !!! ##### 
exp_species <- c("m", "r", "m", "m", "m", "r", "m", "m", "m", "m", "m", "m", "m", "m", "m", "m")

# The list object is needed for annotation of probes with ensembl names
LIST_DATA <- split(PRE_DATA, f = PRE_DATA$Paper) ###!!! <---

# How many Probe_IDs should we test to established appropriate microarray for given paper
Probe_IDs_to_test = 500

### We need to first check appropriate probe ids on smaller dataset and only then do actual annotation, because its too slow otherwise. Hence this shortened list !!! ADD RANDOM SELECTION OF ROWS! !!!
SHORT_LIST_DATA <- lapply(X = LIST_DATA, FUN = function(x){ x[1:Probe_IDs_to_test,] })

### Here we make list with number of lists equal to number of experiments
ANNOT_SHORT_LIST_DATA <- rep(list(list()), times = length(SHORT_LIST_DATA)) ###!!! <---

### This is just a help-list, it should probably be lower, when it is actually used
all_ID_annotations <- rep(list(list()), times = length(SHORT_LIST_DATA))

##### PREPARING LISTS TO BE USED ##### 



##### GET THE HIGHEST-HIT-RETURNING ID TYPE #####

for(n in seq_along(SHORT_LIST_DATA)){
  
  # Here we establish which mart(species) we are using in this given dataset based on "exp_species" vector
  ##### !!! THIS NEEDS TO BE MANUALLY ESTABLISHED !!! ##### 
  usedMart <- switch(exp_species[n], 
                     "m" = biomaRt::useMart("ENSEMBL_MART_ENSEMBL", dataset = "mmusculus_gene_ensembl"), 
                     "r" = biomaRt::useMart("ENSEMBL_MART_ENSEMBL", dataset = "rnorvegicus_gene_ensembl"))

  # Here we extract all the potential gene identifiers
  ##### !!! THIS MAY NEED FURTHER WORK !!! ##### 
  potental_identifiers <- c(usedMart@filters[grep(pattern = "^ensembl(.*)", usedMart@filters[[1]]) , 1], 
                             usedMart@filters[grep(pattern = "^refseq(.*)", usedMart@filters[[1]]) , 1], 
                             usedMart@filters[grep(pattern = "^affy(.*)", usedMart@filters[[1]]) , 1], 
                             usedMart@filters[grep(pattern = "^agilent(.*)", usedMart@filters[[1]]) , 1], 
                             usedMart@filters[grep(pattern = "^illumina(.*)", usedMart@filters[[1]]) , 1])
  
  # Here we are annotating given datasets with data from all the relevant databases
  for (m in seq_along(potental_identifiers)){
    ANNOT_SHORT_LIST_DATA[[n]][[m]] <- biomaRt::getBM(attributes = c(potental_identifiers[[m]], "external_gene_name"), 
                                  filters = potental_identifiers[[m]], 
                                  values = SHORT_LIST_DATA[[n]]$Probe_ID,
                                  uniqueRows = T,
                                  mart = usedMart
    )
  }
  
  # Here we save number of annotations from each ID
  for(k in seq_along(ANNOT_SHORT_LIST_DATA[[n]])) {
    all_ID_annotations[[n]][[k]] <- length(ANNOT_SHORT_LIST_DATA[[n]][[k]][[1]])
  } }

# Lists inside main list are changed into dfs (vectors) as 'which' function demands it
df_all_ID_annotations <- lapply(all_ID_annotations, FUN = unlist)

# Here we will be returing results of appropriate microarray search
HIGHEST_HIT_LIST <- rep(list(list()), times = length(SHORT_LIST_DATA))

# Here we are getting all of the highest yielding IDs
for(n in seq_along(LIST_DATA)){
  for(m in seq_along(which(df_all_ID_annotations[[n]] == max(df_all_ID_annotations[[n]])))){
    HIGHEST_HIT_LIST[[n]][[m]] <- ANNOT_SHORT_LIST_DATA[[n]][[(which(df_all_ID_annotations[[n]] == max(df_all_ID_annotations[[n]]))[m])]]
  } }

# Cause we dont need it anymore, and this is the same data as "all_ID_annotations"
rm(df_all_ID_annotations)

# This is list allowing us to check how many hits did we get for highest-yielding feature for given experiment
check_annotation_percentage <- lapply(HIGHEST_HIT_LIST, FUN = function(x) {  length(x[[1]][[1]]) / Probe_IDs_to_test })

# Here we simply copy/establish names of features, that were highest by themselves
NAMES_HIGHEST_HIT_LIST <- lapply(X = HIGHEST_HIT_LIST, FUN = function(x) { 
  if(length(x) == 1){
    x <- names(x[[1]][1])
  } } )

### Here we produce table with final names of annotation features to be used in actual annotation ###
### !!! MANUAL STEP - [[x]][[]][]- experiment, [[]][[x]][] - featureset, [[]][[]][x] - constant !!! ###
NAMES_HIGHEST_HIT_LIST[[3]] <- names(HIGHEST_HIT_LIST[[3]][[1]][1])
NAMES_HIGHEST_HIT_LIST[[6]] <- names(HIGHEST_HIT_LIST[[6]][[2]][1])
NAMES_HIGHEST_HIT_LIST[[7]] <- names(HIGHEST_HIT_LIST[[7]][[2]][1])
NAMES_HIGHEST_HIT_LIST[[8]] <- names(HIGHEST_HIT_LIST[[8]][[2]][1])
NAMES_HIGHEST_HIT_LIST[[13]] <- NA
NAMES_HIGHEST_HIT_LIST[[16]] <- NA

###### Here we estalish correct lists to analyzed in further steps (currently - need to remove experiments with microarrays not captured in ensembl) ######
WHICH_EXP_TO_ANAL <- seq(1,nrow(FOR_ANNOT_PLATFORMS))[which(!is.na(NAMES_HIGHEST_HIT_LIST))]

##### GET THE HIGHEST-HIT-RETURNING ID TYPE #####



###### PROBE_ID ANNOTATION WITH ENSEMBL GENE NAMES ###### 

ANNOT_LIST_DATA <- list()
for (n in WHICH_EXP_TO_ANAL){
  ANNOT_LIST_DATA[[n]] <- biomaRt::getBM(attributes = c(NAMES_HIGHEST_HIT_LIST[[n]], "external_gene_name"), 
                                filters = NAMES_HIGHEST_HIT_LIST[[n]], 
                                values = LIST_DATA[[n]]$Probe_ID,
                                uniqueRows = F,
                                mart = switch(exp_species[n], 
                                         "m" = biomaRt::useMart("ENSEMBL_MART_ENSEMBL", dataset = "mmusculus_gene_ensembl"), 
                                         "r" = biomaRt::useMart("ENSEMBL_MART_ENSEMBL", dataset = "rnorvegicus_gene_ensembl"))
  )
}

### !!! INTER-SPECIES GENE-NAME STANDARDIZATION? !!! ###

###### PROBE_ID ANNOTATION WITH ENSEMBL GENE NAMES ###### 



###### POST-PREPARATION OF ANNOTATED PROBE_ID TABLES ###### 

## HERE WE WILL COLLAPSE duplicated probe-genename pairs WITHIN ANNOTATED GENE LIST (and also change column names to standarized ones)
UNIQ_ANNOT_LIST_DATA <- list()
for (n in WHICH_EXP_TO_ANAL){
  UNIQ_ANNOT_LIST_DATA[[n]] <- unique(ANNOT_LIST_DATA[[n]])
  colnames(UNIQ_ANNOT_LIST_DATA[[n]]) <- c("Probe_ID", "ensembl_gene_name")
}

## Here we will collapse all gene names for given probe
for (n in WHICH_EXP_TO_ANAL){
  UNIQ_ANNOT_LIST_DATA[[n]] <- aggregate(ensembl_gene_name~Probe_ID, data = UNIQ_ANNOT_LIST_DATA[[n]], FUN = stringr::str_c) ## Here we aggregate the genenames into single row
  UNIQ_ANNOT_LIST_DATA[[n]]$ensembl_gene_name <- lapply(X = UNIQ_ANNOT_LIST_DATA[[n]]$ensembl_gene_name, FUN = paste, collapse = "; ") ##
  UNIQ_ANNOT_LIST_DATA[[n]]$ensembl_gene_name <- as.character(UNIQ_ANNOT_LIST_DATA[[n]]$ensembl_gene_name) ## Here we make sure that collapsed genename column is not a list (need for writing function)
}

# Je?eli w ensemble nie ma przypisanego genu (oznaczenie NA w przys?anym pliku "100_genow") to program pokazuje we wszystkich rubrykach oznaczenie NA chocia? te kom?rki zawiera?y wcze?niej dane (plik AAAreview11). W pe?nych danych kt?re przys?a?e? mi przed ?wi?tami (plik 1 znajduj?cy si? w skopresowanych danych "TEST_ANNOTATION") tych sond w og?le nie ma. Wygl?da na to, ?e to co przys?a?e? wczoraj odnosi si? chyba do wcze?niejszego pliku w kt?rym dane dla sond nie maj?cych przypisanego genu w ensemble zosta?y ca?kowicie usuni?te a to nie jest dobre :( - AMS W LIST_DATA S? TE DANE, ALE W TEST_ANNOTATION JUZ NIE

## Here we merge probes annotated with ensembl with probes data that we have
TEST_ANNOTATION <- list()
for (n in WHICH_EXP_TO_ANAL){
  TEST_ANNOTATION[[n]] <- merge(LIST_DATA[[n]], UNIQ_ANNOT_LIST_DATA[[n]], by = "Probe_ID", all.x = T)
}

## Here lets also remove empty lists
### !!! MANUAL SUPPLEMENTARY STEP - TO BE REMOVED IN FINAL VERSION, AS WE WILL NOT HAVE EMPTY LISTS !!! ###
TEST_ANNOTATION[[13]] <-NULL

# Here we bind all list elements into single data table
SINGLE_TEST_ANNOTATION <- data.table::data.table(rlist::list.rbind(TEST_ANNOTATION), stringsAsFactors = F)

### This will be our input data for further analysis. It contains only significant columns of "Paper", "GroupID", "ensembl_gene_name", "logFC": 
SHORT_SINGLE_TEST_ANNOTATION <- SINGLE_TEST_ANNOTATION %>%
  select("Paper", "GroupID", "ensembl_gene_name", "logFC") %>%
  group_by(Paper, GroupID, ensembl_gene_name) %>%
  nest()
  
# I dont know why purrr::map didnt work for this. Either way, we just lapply this. Here we write UP or DOWN for every logFC for given genename in given experiment (not paper)
SHORT_SINGLE_TEST_ANNOTATION$directionality <- lapply(X = SHORT_SINGLE_TEST_ANNOTATION$data, FUN = function(x) { mutate(x, Symbol_direction = ifelse(logFC > 0, "UP", "DOWN")) } ) 

# Here we count how many UPs and DOWNs are in every given genename in given experiment (not paper)
SHORT_SINGLE_TEST_ANNOTATION$directionality <- lapply(X = SHORT_SINGLE_TEST_ANNOTATION$directionality, FUN = function (x) {table(select(x, "Symbol_direction"))} ) 

# Here we establish actual status of gene in given experiment
SHORT_SINGLE_TEST_ANNOTATION$sum_directionality <- as.character(lapply(X = SHORT_SINGLE_TEST_ANNOTATION$directionality, 
                                               FUN = function(x) {
                                                 if (length(x) == 1 && grepl(pattern = "UP", names(x))) { "UP" }
                                                 else if (length(x) == 1 && grepl(pattern = "DOWN", names(x))) { "DOWN" }
                                                 else if (length(x) == 2 && grepl(pattern = "DOWN", names(x)) && grepl(pattern = "DOWN", names(x))) { "MIXED" }
                                                 else { "ERROR" }
                                               }))

# Here we remove MIXED expression and multiple genenames
FILT_SHORT_SINGLE_TEST_ANNOTATION <- SHORT_SINGLE_TEST_ANNOTATION %>%
  filter(!grepl(pattern = "(.*);(.*)", SHORT_SINGLE_TEST_ANNOTATION$ensembl_gene_name)) %>%
  filter(!sum_directionality == "MIXED") %>%
  filter(!sum_directionality == "ERROR") %>%
  filter(!is.na(ensembl_gene_name))

# Here we add mean to each 
STDINPUT_FILT_SHORT_SIN_T_ANNO <- FILT_SHORT_SINGLE_TEST_ANNOTATION %>%
  mutate(mean = as.numeric(map(data, function(x) { as.numeric(mean(x[[1]]))} ))) %>% ## This way we give actuall vector to function, not a data table(tibble)
  select("Paper", "GroupID", "ensembl_gene_name", "sum_directionality", "mean") 

### !!! THE IDEA IS THAT THE "STDINPUT_FILT_SHORT_SIN_T_ANNO" IS THE INPUT FOR ALL FURTHER INQUIRIES !!! ###

###### POST-PREPARATION OF ANNOTATED PROBE_ID TABLES ###### 



#################################################
##### ANNOTATE PROBE_IDs WITH ENSEMBL NAMES #####
#################################################



######################
##### CLUSTERING #####
######################

### OK, so below we prepare tables for clustering ###

CLU_STDINPUT_FILT_SHORT_SIN_T_ANNO <- STDINPUT_FILT_SHORT_SIN_T_ANNO %>%
  select("GroupID", "ensembl_gene_name", "mean") %>% 
  spread(key = GroupID, value = mean)  %>%
  as.data.frame()

# We change NAs to 0, because we assume that all genes that we do not have in our data set are not differentially expressed, so logFC should be equal to 0
ZEROED_CLU_STDINPUT_FILT_SHORT_SIN_T_ANNO <- CLU_STDINPUT_FILT_SHORT_SIN_T_ANNO
ZEROED_CLU_STDINPUT_FILT_SHORT_SIN_T_ANNO[is.na(ZEROED_CLU_STDINPUT_FILT_SHORT_SIN_T_ANNO)] <- 0 ###!!!

# Nie rozumiem zupełnie czemu, ale matrixy wariują jak się applyuje im po rowach, data framey działają perfekcyjnie. Anyway, tutaj wyciągamy do klastrowania tylko geny które mają przynajmniej 3 wartości (pomijając entrez_gene column)
ZEROED_CLU_STDINPUT_FILT_SHORT_SIN_T_ANNO$filter <- apply(X = ZEROED_CLU_STDINPUT_FILT_SHORT_SIN_T_ANNO[,-1], MARGIN = 1, FUN = function (x) 
{ sum(abs(x) > 0.5) })  ###!!!

UP3_ZEROED_CLU_STDINPUT_FILT_SHORT_SIN_T_ANNO <- dplyr::filter(ZEROED_CLU_STDINPUT_FILT_SHORT_SIN_T_ANNO, filter >= 3)
UP3_ZEROED_CLU_STDINPUT_FILT_SHORT_SIN_T_ANNO$filter <- NULL

#readr::write_tsv(x = UP3_ZEROED_CLU_STDINPUT_FILT_SHORT_SIN_T_ANNO, path = "UP3_ZEROED_CLU_STDINPUT_FILT_SHORT_SIN_T_ANNO.tsv")


# Change the prepared data frame to matrix for clustering purposes
rownames(UP3_ZEROED_CLU_STDINPUT_FILT_SHORT_SIN_T_ANNO) <- UP3_ZEROED_CLU_STDINPUT_FILT_SHORT_SIN_T_ANNO$ensembl_gene_name
UP3_ZEROED_CLU_STDINPUT_FILT_SHORT_SIN_T_ANNO$ensembl_gene_name <- NULL
MATRIX_UP3_ZEROED_CLU_STDINPUT_FILT_SHORT_SIN_T_ANNO <- as.matrix(UP3_ZEROED_CLU_STDINPUT_FILT_SHORT_SIN_T_ANNO)

# rownames(UP3) <- UP3$ensembl_gene_name
# UP3$ensembl_gene_name <- NULL
# UP3 <- as.matrix(UP3)

#Mamy tutaj dużo sond, które nie mają wartości w żadnym z eksperymentów. Czy to sondy natywne dla usuniętych dwóch eksperymentów, czy coś dziwnego się dzieje? - dzieje się to, że w oryginalnych danych są sondy, które mają log FC bliski zeru do dwóch miejsc po przecinku



readr::read_tsv()
### runibic ###

BiocManager::install(c("runibic", "biclust", "gplots"))
library(runibic)

runibicRES2 <- biclust::biclust(MATRIX_UP3_ZEROED_CLU_STDINPUT_FILT_SHORT_SIN_T_ANNO, method = runibic::BCUnibic())

dir.create("ClusterSummaryRunibic")

# Return figure representing which groups are included in which clusters
png(filename = paste0("ClusterSummaryRunibic/", names(MATRIX_UP3_ZEROED_CLU_STDINPUT_FILT_SHORT_SIN_T_ANNO), "_Cluster_Summary.png"), width = 1920, height = 1080, units = "px")
par(cex.axis = 1, oma=c(0,4,0,8))
biclust::biclustmember(runibicRES2, MATRIX_UP3_ZEROED_CLU_STDINPUT_FILT_SHORT_SIN_T_ANNO, main = names(MATRIX_UP3_ZEROED_CLU_STDINPUT_FILT_SHORT_SIN_T_ANNO))
dev.off()
# png(filename = paste0("ClusterSummaryRunibic/", the_names[n], "_Cluster_Summary.png"), width = 1920, height = 1080, units = "px")
# par(cex.axis = 1, oma=c(0,4,0,8))
# biclustmember(runibicRES2[[n]], matrixed_annot_the_list[[n]], main = the_names[n])
# dev.off()


# Shows which clusters are similar to other clusters (multidimensional scaling - similar to PCA)
png(filename = paste0("ClusterSummaryRunibic/", names(MATRIX_UP3_ZEROED_CLU_STDINPUT_FILT_SHORT_SIN_T_ANNO), "_Cluster_Relatedness.png"), width = 3840, height = 2160, units = "px")
biclust::bubbleplot(MATRIX_UP3_ZEROED_CLU_STDINPUT_FILT_SHORT_SIN_T_ANNO, runibicRES2, showLabels = T)
dev.off()

# This shows entire heatmap
par(cex.axis = 0.5)
biclust::heatmapBC(MATRIX_UP3_ZEROED_CLU_STDINPUT_FILT_SHORT_SIN_T_ANNO, runibicRES2)
axis(1, at=1:dim(MATRIX_UP3_ZEROED_CLU_STDINPUT_FILT_SHORT_SIN_T_ANNO)[2], labels = colnames(MATRIX_UP3_ZEROED_CLU_STDINPUT_FILT_SHORT_SIN_T_ANNO), las=2)
axis(2, at=1:dim(MATRIX_UP3_ZEROED_CLU_STDINPUT_FILT_SHORT_SIN_T_ANNO)[1], labels = rownames(MATRIX_UP3_ZEROED_CLU_STDINPUT_FILT_SHORT_SIN_T_ANNO), las=2)


biclust::drawHeatmap(MATRIX_UP3_ZEROED_CLU_STDINPUT_FILT_SHORT_SIN_T_ANNO, runibicRES2, number = 1, beamercolor = F, paleta = col_for_heatmaps(1000))



biclust::writeBiclusterResults(fileName = paste0("ClusterSummaryRunibic/", names(MATRIX_UP3_ZEROED_CLU_STDINPUT_FILT_SHORT_SIN_T_ANNO), "_ClustersRunibic.txt"), 
                      bicResult = runibicRES2, 
                      bicName = paste0(names(MATRIX_UP3_ZEROED_CLU_STDINPUT_FILT_SHORT_SIN_T_ANNO)),
                      geneNames = rownames(MATRIX_UP3_ZEROED_CLU_STDINPUT_FILT_SHORT_SIN_T_ANNO), 
                      arrayNames = colnames(MATRIX_UP3_ZEROED_CLU_STDINPUT_FILT_SHORT_SIN_T_ANNO),
                      append =FALSE, 
                      delimiter="\t")

### runibic ###



### hierachical ###

dist1 <- dist(x = MATRIX_UP3_ZEROED_CLU_STDINPUT_FILT_SHORT_SIN_T_ANNO, method = "euclidean")

hclust1 <- hclust(dist1, method="complete")



SHORT_MATRIX_UP3_ZEROED_CLU_STDINPUT_FILT_SHORT_SIN_T_ANNO <- MATRIX_UP3_ZEROED_CLU_STDINPUT_FILT_SHORT_SIN_T_ANNO[1:100,]


# For server
# UP3 <- read.delim("UP3_ZEROED_CLU_STDINPUT_FILT_SHORT_SIN_T_ANNO.tsv", header = T, sep = "\t")
# rownames(UP3) <- UP3$ensembl_gene_name
# UP3$ensembl_gene_name <- NULL
# UP3 <- as.matrix(UP3)
# ../cluster -f UP3_ZEROED_CLU_STDINPUT_FILT_SHORT_SIN_T_ANNO.tsv -m a -g 2 

pdf("heatmap.pdf", pointsize = 4)
gplots::heatmap.2(SHORT_MATRIX_UP3_ZEROED_CLU_STDINPUT_FILT_SHORT_SIN_T_ANNO, 
        distfun = function (x) { dist(x, ) }, 
        hclustfun = function (x) { hclust(x, method = "average") },
        trace = "none"
)
dev.off()

png(filename = "heatmap.png", width = 3840, height = 2160, units = "px")
heatmap(UP3)
dev.off()

png(filename = "plot.png", width = 3840, height = 2160, units = "px")
plot(hclust1)
dev.off()

install.packages("proxy")

simil1 <- proxy::simil(UP3)
png(filename = "_heatmap.png", width = 3840, height = 2160, units = "px")
heatmap(simil1)
dev.off()

# For server




plot(hclust1)
heatmap(SHORT_MATRIX_UP3_ZEROED_CLU_STDINPUT_FILT_SHORT_SIN_T_ANNO)


TOTAL_GENE_COUNT_PER_EXPERIMENT <- as.tibble(SINGLE_TEST_ANNOTATION) %>%
  group_by(ensembl_gene_name) %>%
  summarise(n())

TOTAL_GENE_COUNT_PER_PUBLICATION <- as.tibble(SINGLE_TEST_ANNOTATION) %>%
  group_by(Paper) %>%
  group_by(ensembl_gene_name) %>%
  summarise(n())


######################
##### CLUSTERING #####
######################








##############################################################
##############################################################
##############################################################







#Tutaj trzeba zrobić tak: zrobić .txt files z każdego z eksperymentów. Przefiltrować odpowiednią bazę danych przez nazwy sond z tego eksperymentu.
#Potem jeszcze trzeba je sprowadzić do jednolitego nazewnictwa (mus or homo?)


# featureDat <- getBM(attributes = c("agilent_wholegenome_4x44k_v1", "affy_mg_u74av2", "affy_mogene_1_0_st_v1"), 
#                     mart = usedMartMUS)
# 
# featureDat <- getBM(attributes = c("affy_ragene_2_1_st_v1", "external_gene_name"), 
#                     filters = "affy_ragene_2_1_st_v1", 
#                     values = rownames(dataMatrixMW),
#                     uniqueRows = TRUE,
#                     mart = usedMart) #This is from Biomart. Here we download the names
# xxx <- aggregate(external_gene_name~affy_ragene_2_1_st_v1, data = featureDat, FUN = c) #Here we collapse names, cause row names have to be unique and many probes correspond to more than 1 gene name in biomart
# 
# yyy <- as.data.frame(rownames(dataMatrixMW))#Here we produce full list of features, cause some of them dont have annotations in biomart and they are not returned when annotations
# 
# colnames(yyy) <- "affy_ragene_2_1_st_v1" #This is for the merge to work
# xxxx <- merge(yyy, xxx, by = "affy_ragene_2_1_st_v1", all.x = TRUE) #Here we produce annotated full list of features
# rownames(xxxx) <- rownames(dataMatrixMW) #Here we name the features
# xxxx$affy_ragene_2_1_st_v1 <- as.character(xxxx$affy_ragene_2_1_st_v1) #Not sure if thats nececcary
# xxxx$external_gene_name <- as.character(xxxx$external_gene_name) #Not sure if thats nececcary
# 
# featureMW <- new("AnnotatedDataFrame", data = xxxx) #Feature data is in Annotated Dataframe format
# dim(featureDat)
# rm(usedMart, featureDat, xxx, xxxx, yyy)
# 
# ###### EXTRACT ANNOTATIONS FROM BIOMART ###### 



### HERE WE CHECK IF ALL VALUES IN INPUT TABLE ARE EITHER NONES, NAS OR CORRECT VALUES
FUNCTION__1__check_rm_of_unid_val <- function(){
# Table containing all NONEs
ORG_DATA__1__NONEs <- ORG_DATA %>%
  dplyr::filter(Gene_symbol == "NONE") 

# Table containing all NAs
ORG_DATA__2__NAs <- ORG_DATA %>%
  dplyr::filter(is.na(Gene_symbol)) 

# Number of removed NONEs and NAs
ORG_DATA__3__sum_of_NONEs_and_NAs <- nrow(ORG_DATA__1__NONEs) + nrow(ORG_DATA__2__NAs)

# Here is number of unidentified rows sliped during filtering out bad values
ORG_DATA__x__missing_processed_rows <- nrow(ORG_DATA) - (ORG_DATA__3__sum_of_NONEs_and_NAs + nrow(NO_UNIDS_ORG_DATA))

if (ORG_DATA__x__missing_processed_rows != 0){ 
  stop("Hey, buddy! You have some wierd values in Your raw data, guy! Better check whats happening, or Your results will smell of farts!")
}

return(ORG_DATA__x__missing_processed_rows)
}
### HERE WE CHECK IF ALL VALUES IN INPUT TABLE ARE EITHER NONES, NAS OR CORRECT VALUES



## Subset of table without "NONE" gene ids.
NO_UNIDS_ORG_DATA <- ORG_DATA %>%
  dplyr::filter(Gene_symbol != "NONE" & !is.na(Gene_symbol))

FUNCTION__1__check_rm_of_unid_val() # Check if it went well


###### WHOLE DATASET ANALYSIS ######

# Tutaj liczymy ile razy geny wyst?puj? w oryginalnym dataset, nie patrz?c czy s? up czy down
WHOLE_NO_UNIDS_ORG_DATA <- NO_UNIDS_ORG_DATA %>%
  select(Gene_symbol) %>%
  group_by(Gene_symbol) %>%
  summarise(number = n())



# Tutaj liczymy ile razy geny wyst?puj? w oryginalnym dataset, patrz?c czy s? up czy down
UorDWHOLE_NO_UNIDS_ORG_DATA <- NO_UNIDS_ORG_DATA %>%
  select(Gene_symbol, logFC) %>%
  mutate(Symbol_direction = ifelse(logFC > 0, "UP", "DOWN")) %>%
  mutate(Symbol_direction = paste(Gene_symbol, Symbol_direction, sep = "_")) %>%
  group_by(Symbol_direction) %>%
  summarise(number = n()) %>% 
  mutate(Gene_symbol2 = str_remove(Symbol_direction, "_.*"))

###### WHOLE DATASET ANALYSIS ######



###### COMPARISONS-CENTERED ANALYSIS ######



### Here we set whether we want to analyze papers or comparisons
P_or_C = quo(Paper) #" GroupID OR Paper "



# Tutaj liczymy ile razy geny wyst?puj? W KA?DYM Z POR?WNA?, nie patrz?c czy s? up czy down
COMP_NO_UNIDS_ORG_DATA <- NO_UNIDS_ORG_DATA %>%
  select(!!P_or_C, Gene_symbol) %>%
  group_by(!!P_or_C, Gene_symbol) %>%
  summarise(number = n())



# Tutaj liczymy ile razy geny wyst?puj? W KA?DYM Z POR?WNA?, patrz?c czy s? up czy down    
UorDCOMP_NO_UNIDS_ORG_DATA <- NO_UNIDS_ORG_DATA %>%
  select(!!P_or_C, Gene_symbol, logFC) %>%
  mutate(Symbol_direction = ifelse(logFC > 0, "UP", "DOWN")) %>%
  mutate(Symbol_direction = paste(Gene_symbol, Symbol_direction, sep = "_")) %>%
  group_by(!!P_or_C, Symbol_direction) %>%
  summarise(Sym_dir_number = n()) %>%
  mutate(Gene_symbol2 = str_remove(Symbol_direction, "_.*"))



#Divide data into genes expressed in single direction in given comparison, vs genes expressed in different direction (bad genes)
nonUNIQ_UorDCOMP_NO_UNIDS_ORG_DATA <- UorDCOMP_NO_UNIDS_ORG_DATA %>%
  group_by(!!P_or_C) %>%
  filter(duplicated(Gene_symbol2, fromLast = T) | duplicated(Gene_symbol2))

UNIQ_UorDCOMP_NO_UNIDS_ORG_DATA <- UorDCOMP_NO_UNIDS_ORG_DATA %>%
  group_by(!!P_or_C) %>%
  filter(!duplicated(Gene_symbol2, fromLast = T) & !duplicated(Gene_symbol2))



# Check if unique/duplicated division went well           
if (nrow(UorDCOMP_NO_UNIDS_ORG_DATA) - (nrow(nonUNIQ_UorDCOMP_NO_UNIDS_ORG_DATA) + nrow(UNIQ_UorDCOMP_NO_UNIDS_ORG_DATA)) != 0){ 
  stop("Hey, fwend! You have some wierd values in Your counted data, buddy! Better check whats happening, or Your results will smell of moose scrotum!")
}



# Here we make a table only with genes that were replicated in few comparisons
REPL_UNIQ_UorDCOMP_NO_UNIDS_ORG_DATA <- UNIQ_UorDCOMP_NO_UNIDS_ORG_DATA %>%
  filter(Sym_dir_number >= 3)


#Annotate base on Paper OR GroupID
ANNO_REPL_UNIQ_UorDCOMP_NO_UNIDS_ORG_DATA <- merge(REPL_UNIQ_UorDCOMP_NO_UNIDS_ORG_DATA, COMPARISONS, by = "Paper")


###### COMPARISONS-CENTERED ANALYSIS ######



             
      
    
    
    

  
  
  
  
  
  
KAJA:

setwd("E:/Projekty/Kaja Review LDH")
  
library(enrichR)

dbs_Onto_Path <- c("GO_Molecular_Function_2018", "GO_Cellular_Component_2018", "GO_Biological_Process_2018", "MGI_Mammalian_Phenotype_2017", "Human_Phenotype_Ontology", "KEGG_2016", "WikiPathways_2016", "Panther_2016", "Reactome_2016", "BioCarta_2016", "NCI-Nature_2016", "ARCHS4_Kinases_Coexp", "HumanCyc_2016", "BioPlex_2017", "SILAC_Phosphoproteomics")
dbs_Regul <- c("Genome_Browser_PWMs", "TRANSFAC_and_JASPAR_PWMs", "Transcription_Factor_PPIs", "ChEA_2016",  "TF-LOF_Expression_from_GEO", "PPI_Hub_Proteins", "ENCODE_TF_ChIP-seq_2015", "ENCODE_Histone_Modifications_2015", "ENCODE_and_ChEA_Consensus_TFs_from_ChIP-X", "CORUM", "Pfam_InterPro_Domains", "Phosphatase_Substrates_from_DEPOD", "TF_Perturbations_Followed_by_Expression", "ARCHS4_TFs_Coexp", "miRTarBase_2017", "TargetScan_microRNA_2017", "Enrichr_Submissions_TF-Gene_Coocurrence", "Epigenomics_Roadmap_HM_ChIP-seq")
dbs_Drug_Tissue_Other <- c("Jensen_TISSUES", "ARCHS4_IDG_Coexp", "DrugMatrix", "RNA-Seq_Disease_Gene_and_Drug_Signatures_from_GEO", "OMIM_Disease", "Jensen_DISEASES", "DSigDB",  "Jensen_COMPARTMENTS", "ARCHS4_Tissues", "Tissue_Protein_Expression_from_Human_Proteome_Map", "Tissue_Protein_Expression_from_ProteomicsDB", "Mouse_Gene_Atlas", "ESCAPE", "Chromosome_Location", "MSigDB_Computational", "dbGaP", "Genes_Associated_with_NIH_Grants", "GeneSigDB")
dbs <- c(dbs_Onto_Path, dbs_Regul, dbs_Drug_Tissue_Other)

genes <- c("ldha", "ldhb")

ALL_ENRICHR <- enrichR::enrichr(genes, dbs)
ALL_ENRICHR_DATA <- rlist::list.rbind(ALL_ENRICHR)
write.table(ALL_ENRICHR_DATA, "ALL_ENRICHR_DATA.txt", sep="\t")

getwd()

tp <- read.table("TF_PPI_FROM_ENRICHR.txt", header = T, stringsAsFactors = F)

TP_ENRICHR <- enrichR::enrichr(tp$Enrichr_TFs_PPIs_unique, dbs_Onto_Path)
ALL_TP_ENRICHR_DATA <- rlist::list.rbind(TP_ENRICHR)
write.table(ALL_TP_ENRICHR_DATA, "ALL_TP_ENRICHR_DATA.txt", sep="\t")







#### TESTING MULTIPLE-PROBE ANNOATION ####
test <- read.table("test_of_diff_probes _GPL13912_GPL6887.txt", header = F, stringsAsFactors = F)
test2 <- test


final_list <- list()
##### This needs to be looped for all data files ##### 
usedMartMUS <- useMart("ENSEMBL_MART_ENSEMBL", dataset = "mmusculus_gene_ensembl") ## here we need to add info oon which animal do we study here
filtersMUS <- listFilters(usedMartMUS)



### Here we are getting all relevant possible databases
potentalNames <- c(filtersMUS[grep(pattern = "^ensembl(.*)", filtersMUS[[1]]) , 1], filtersMUS[grep(pattern = "^refseq(.*)", filtersMUS[[1]]) , 1], filtersMUS[grep(pattern = "^affy(.*)", filtersMUS[[1]]) , 1], filtersMUS[grep(pattern = "^agilent(.*)", filtersMUS[[1]]) , 1], filtersMUS[grep(pattern = "^illumina(.*)", filtersMUS[[1]]) , 1])



### Here we are extracting annotations from all the relevant databases
test_list <- list()
for(n in seq_along(potentalNames)) {
  test_list[[n]] <- getBM(attributes = c(potentalNames[[n]], "external_gene_name"), 
                          filters = potentalNames[[n]], 
                          values = test[[1]],
                          uniqueRows = T,
                          mart = usedMartMUS) 
}

# Here I get vector with length of each relevant database
for(n in seq_along(test_list)) {
  tables[n] <- length(test_list[[n]][[1]])
}
# Here I find out at which list the highest number of hits and put it into final data extraction
final_list[[1]] <- test_list[[which(tables == max(tables))]] ##
##### This needs to be looped for all data files ##### 


#### TESTING MULTIPLE-PROBE ANNOATION ####



# ###### EXTRACT ANNOTATIONS FROM BIOMART ######
# 
# library(biomaRt)
# #listMarts()
# 
# usedMartRAT <- useMart("ENSEMBL_MART_ENSEMBL", dataset = "rnorvegicus_gene_ensembl")
# usedMartMUS <- useMart("ENSEMBL_MART_ENSEMBL", dataset = "mmusculus_gene_ensembl")
# 
# #attributesRAT <- listAttributes(usedMartRAT)
# #attributesMUS <- listAttributes(usedMartMUS)
# 
# ###### Here we are trying to choose proper microarrays ###### OBSOLETE!!!
# 
# filtersRAT <- listFilters(usedMartRAT)
# filtersMUS <- listFilters(usedMartMUS)
# 
# PLATFORMS <- read.csv("platforms.txt", header = F)
# 
# # Name ensembl databases
# PLATFORMS$Biomart <- NA
# PLATFORMS$Biomart[1] <- subset(filtersMUS, filtersMUS$description == "ILLUMINA MouseWG 6 V2 probe ID(s) [e.g. ILMN_1240829]")[[1]] #ok
# PLATFORMS$Biomart[2] <- subset(filtersRAT, filtersRAT$description == "AFFY RaGene 1 0 st v1 probe ID(s) [e.g. 10930560]")[[1]]
# PLATFORMS$Biomart[3] <- subset(filtersMUS, filtersMUS$description == "AGILENT SurePrint G3 GE 8x60k probe ID(s) [e.g. A_65_P05358]")[[1]]
# PLATFORMS$Biomart[4] <- subset(filtersMUS, filtersMUS$description == "AFFY MoGene 2 1 st v1 probe ID(s) [e.g. 17532593]")[[1]]
# PLATFORMS$Biomart[5] <- subset(filtersMUS, filtersMUS$description == "AGILENT SurePrint G3 GE 8x60k probe ID(s) [e.g. A_65_P05358]")[[1]]
# PLATFORMS$Biomart[6] <- subset(filtersRAT, filtersRAT$description == "AFFY Rat230 2 probe ID(s) [e.g. 1375651_at]")[[1]]
# PLATFORMS$Biomart[7] <- subset(filtersMUS, filtersMUS$description == "AGILENT WholeGenome 4x44k v1 probe ID(s) [e.g. A_51_P323880]")[[1]]
# PLATFORMS$Biomart[8] <- subset(filtersMUS, filtersMUS$description == "AFFY MG U74Av2 probe ID(s) [e.g. 96290_f_at]")[[1]] 
# PLATFORMS$Biomart[9] <- subset(filtersMUS, filtersMUS$description == "AFFY MoGene 1 0 st v1 probe ID(s) [e.g. 10598025]")[[1]]
# PLATFORMS$Biomart[10] <- NA
# PLATFORMS$Biomart[11] <- subset(filtersMUS, filtersMUS$description == "AFFY MoGene 1 0 st v1 probe ID(s) [e.g. 10598025]")[[1]]
# PLATFORMS$Biomart[12] <- NA
# 
# # Add species information
# PLATFORMS$Species <- c("m", "r", "m", "m", "m", "r", "m", "m", "m", "m", "m", "m")
# 
# # Make platform information
# PLATFORMS <- PLATFORMS %>%
#   mutate(PL_ID = str_remove(V1, "[/ ].*"), )
#   
# ###### Here we are trying to choose proper microarrays ###### OBSOLETE!!!



# ###### Here we are annotating experiments with biomart platform descriptions ###### 
# 
# for_annot_COMPARISONS <- COMPARISONS %>%
#   dplyr::select(Paper, PL_ID) %>%
#   unique()
# 
# FOR_ANNOT_PLATFORMS <- merge(for_annot_COMPARISONS, PLATFORMS, by = "PL_ID") %>%
#   arrange(Paper)
# 
# ###### Here we are annotating experiments with biomart platform descriptions ###### 



# ###### Here we need to remove experiments with microarrays not captured in ensembl ######
# WHICH_EXP_TO_ANAL <- seq(1,nrow(FOR_ANNOT_PLATFORMS))[c(-13, -16)]
# 
# ## Here we are doing probe ensembl annotation
# ANNOT_LIST_DATA <- list()
# 
# for (n in WHICH_EXP_TO_ANAL){
#   ANNOT_LIST_DATA[[n]] <- getBM(attributes = c(FOR_ANNOT_PLATFORMS$Biomart[n], "external_gene_name"), 
#                       filters = FOR_ANNOT_PLATFORMS$Biomart[n], 
#                       values = LIST_DATA[[n]]$Probe_ID,
#                       uniqueRows = F,
#                       mart = 
#                         if(FOR_ANNOT_PLATFORMS$Species[n] == "m"){ usedMartMUS } else if(FOR_ANNOT_PLATFORMS$Species[n] == "r"){ usedMartRAT }
#   )
#   }

# ## HERE WE WILL COLLAPSE duplicated probe-genename pairs WITHIN ANNOTATED GENE LIST (and also change column names to standarized ones)
# UNIQ_ANNOT_LIST_DATA <- list()
# 
# for (n in WHICH_EXP_TO_ANAL){
#   UNIQ_ANNOT_LIST_DATA[[n]] <- unique(ANNOT_LIST_DATA[[n]])
#   colnames(UNIQ_ANNOT_LIST_DATA[[n]]) <- c("Probe_ID", "ensembl_gene_name")
# }

# ## Here we will collapse all gene names for given probe
# for (n in WHICH_EXP_TO_ANAL){
#   UNIQ_ANNOT_LIST_DATA[[n]] <- aggregate(ensembl_gene_name~Probe_ID, data = UNIQ_ANNOT_LIST_DATA[[n]], FUN = str_c) ## Here we aggregate the genenames into single row
#   UNIQ_ANNOT_LIST_DATA[[n]]$ensembl_gene_name <- lapply(X = UNIQ_ANNOT_LIST_DATA[[n]]$ensembl_gene_name, FUN = paste, collapse = "; ") ##
#   UNIQ_ANNOT_LIST_DATA[[n]]$ensembl_gene_name <- as.character(UNIQ_ANNOT_LIST_DATA[[n]]$ensembl_gene_name) ## Here we make sure that collapsed genename column is not a list (need for writing function)
# }

# Je?eli w ensemble nie ma przypisanego genu (oznaczenie NA w przys?anym pliku "100_genow") to program pokazuje we wszystkich rubrykach oznaczenie NA chocia? te kom?rki zawiera?y wcze?niej dane (plik AAAreview11). W pe?nych danych kt?re przys?a?e? mi przed ?wi?tami (plik 1 znajduj?cy si? w skopresowanych danych "TEST_ANNOTATION") tych sond w og?le nie ma. Wygl?da na to, ?e to co przys?a?e? wczoraj odnosi si? chyba do wcze?niejszego pliku w kt?rym dane dla sond nie maj?cych przypisanego genu w ensemble zosta?y ca?kowicie usuni?te a to nie jest dobre :( - AMS W LIST_DATA S? TE DANE, ALE W TEST_ANNOTATION JUZ NIE

# ## Here we marge probes annotated with ensembl with probes annotated with other methods
# TEST_ANNOTATION <- list()
# for (n in WHICH_EXP_TO_ANAL){
#   TEST_ANNOTATION[[n]] <- merge(LIST_DATA[[n]], UNIQ_ANNOT_LIST_DATA[[n]], by = "Probe_ID", all.x = T)
# }  

# Here we write output test annotation files
# dir.create("TEST_ANNOTATION")
# for (n in WHICH_EXP_TO_ANAL){
#   write.table(TEST_ANNOTATION[[n]], file = paste0("TEST_ANNOTATION/", n, ".txt"), sep = "\t", dec = ",")
# } 
# 
# 
# ### Here write probe extraction function, but for now we will have this ###
# xxx <- lapply(list.files(pattern = "*.txt"), FUN = read.delim, header = T, sep = "\t", dec = ",")
# ### Here we merge list of tables into single table
# EXTRACTION_TABLE <- rlist::list.rbind(TEST_ANNOTATION) #####!!!!!!!!!!!!
# 
# TO_BE_EXTRACTED <- read.delim(file = "test adnotacji wg ensemble.txt", header = T) ### Here we load GJts probes to be extracted
# 
# POST_EXTRACTION <- merge(x = TO_BE_EXTRACTED, y = EXTRACTION_TABLE, by = "Probe_ID", all.x = T) ### Here we extract the probes...
# 
# write_tsv(x = POST_EXTRACTION, path = "100_genow_V2.txt", na = "NA", append = FALSE)
# 
# 
# 
# ### ADDITIONAL
# # MISSING PROBES
# LIST_DATA[[11]]$Probe_ID[!(LIST_DATA[[11]]$Probe_ID %in% TEST_ANNOTATION[[11]]$Probe_ID)]
# 
# 
# 
# ####### To trzeba da? gdzie? do g??wnego flowa
# ### Here we get all the written output tables
# 
# ### Here we get all the written output tables
# 
# 
# 
# ### Here we get all the written output tables
# zzz <- read_tsv(file = "100_genow.txt") 
# xxx <- aggregate(ensembl_gene_name~Probe_ID, data = zzz, FUN = str_c) ## Here we aggregate
# xxx$upgraded_ens_names <- map(.x = xxx$ensembl_gene_name, .f = unique, collapse = ' ') # Here we remove duplicate gene names
# xxx$upgraded_ens_names <- lapply(X = xxx$upgraded_ens_names, FUN = paste, collapse = "; ") ##!!!!!!!! Here we collapse character vector into single string
# 
# 
# 
# paste((d), )
# 
# 
# yyy <- as.data.frame(xxx$ensembl_gene_name)
# 
# 
# xxx$ensembl_gene_name <- str_remove(string = xxx$ensembl_gene_name, pattern = '[c][(][\\]')
# 
# write.table(x = xxx, file = "test.txt", sep = "\t", )
# ### HERE WE EXTRACT SPECIFIC PROBES FROM DATASET FOR GRZEGORZ ###
# 
# head(zzz)
###### Here we need to remove experiments with microarrays not captured in ensembl ######


# CLUS_TEST_ANNOTATION <- TEST_ANNOTATION %>%
#   map(.f = select, "GroupID", "ensembl_gene_name", "logFC") 
# 
# FINAL_CLUS_TEST_ANNOTATION <- CLUS_TEST_ANNOTATION %>%
#   map(.f = nest, GroupID) %>%
#   map(group_by(ensembl_gene_name) ) %>%
#   map(summarise, median(logFC)) %>%
#   map(spread, key = GroupID, value = logFC)
# 
# Dawid4$data %>% map(~ filter(.x, !is.na(.x$Stosunek)) ) -> Dawid4_filtered 
# 
# FINAL_CLUS_TEST_ANNOTATION <- CLUS_TEST_ANNOTATION %>%
#   map(group_by, GroupID, ensembl_gene_name) %>%
#   map(.f = nest)
#   
# xxx <- FINAL_CLUS_TEST_ANNOTATION %>%
#         map(.f = ~ map(.x$data, mutate, x = .x %>% map("x")))
# 
# 
# .f = ~ print(class(.x))))
# 
# map(.f = ~ print(class(.x$data)))
# 
# is.null(FINAL_CLUS_TEST_ANNOTATION[[7]]$data[[1]])
# 
# x <- lapply(FINAL_CLUS_TEST_ANNOTATION, is.null)
# 
# 
# map(.f = ~ mutate(median = map(.x = data, .f = ~ summarise(median(.x$logFC)))))
# class(FINAL_CLUS_TEST_ANNOTATION[[1]]$data[[12]])
# str(FINAL_CLUS_TEST_ANNOTATION[[1]]$data[[12]])
#   
# 
# class(test$data[[1]][[1]])
# test <- FINAL_CLUS_TEST_ANNOTATION[[1]]
# 
# test2 <- test %>%
#   mutate(median = map(.x = data, .f = ~ mean(.x[[1]][[1]])))

# lapply(X = TEST_ANNOTATION, FUN = dplyr::select())
# map(.f = ~ map(.f = ~ group_by(.x, ensembl_gene_name))) %>%
#   map(.f = unnest)
# map(.f = ~ map(.$data, ~ summarise(.x, median = median(logFC))))
# map(.f = ~ map(.$data, ~ ) %>%
#       map(.f = unnest)
#     map(spread, key = GroupID, value = logFC)



#############################################
############## FUNCTIONS ####################
#############################################



library(tidyverse)



##### FUNCTION FOR FORMATING DATA FOR CLUSTERING ##### 

FOR_CLUS <- function(data__) 
{
  CLU_data__ <- data__ %>%
    select("GroupID", "ensembl_gene_name", "mean") %>% 
    spread(key = GroupID, value = mean)  %>%
    as.data.frame()
  
  # We change NAs to 0, because we assume that all genes that we do not have in our data set are not differentially expressed, so logFC should be equal to 0
  ZEROED_CLU_data__ <- CLU_data__
  ZEROED_CLU_data__[is.na(ZEROED_CLU_data__)] <- 0 ###!!!
  
  # Nie rozumiem zupełnie czemu, ale matrixy wariują jak się applyuje im po rowach, data framey działają perfekcyjnie. Anyway, tutaj wyciągamy do klastrowania tylko geny które mają przynajmniej 3 wartości (pomijając entrez_gene column)
  ZEROED_CLU_data__$filter <- apply(X = ZEROED_CLU_data__[,-1], MARGIN = 1, FUN = function (x) 
  { sum(abs(x) > 0.5) })  ###!!!
  
  UP3_ZEROED_CLU_data__ <- dplyr::filter(ZEROED_CLU_data__, filter >= 3)
  UP3_ZEROED_CLU_data__$filter <- NULL
  
  return(UP3_ZEROED_CLU_data__)
}

##### FUNCTION FOR FORMATING DATA FOR CLUSTERING ##### 

#############################################
############## FUNCTIONS ####################
#############################################



##############################################
##### LOAD INPUT. BEWARE OF FILE FORMAT. ##### 
##############################################

### Sadly, "numeric" columns may contain both . and , as decimary separator. Hence we need to load them as char, replace all , with . change into numeric and only then we have nice input. Some probes are significant despite having logFCs near 0. Also: format of input data is: single file, multiple columns, at least Paper, Experiment, Probe_ID, logFC.
PRE_DATA <- readr::read_tsv("G1.txt", col_types = "nccccccccccccccc", locale = readr::locale(decimal_mark = ","))

PRE_DATA[8:12] <- lapply(X = PRE_DATA[8:12], FUN = function(x) { stringr::str_replace(string = x, pattern = ",", replacement = ".")}) ### !!! THIS IS VERY COOL CONSTRUCT THAT I NEED TO NOTE!!

PRE_DATA[8:12] <- lapply(PRE_DATA[8:12], as.numeric)

##############################################
##### LOAD INPUT. BEWARE OF FILE FORMAT. ##### 
##############################################



#################################################
##### ANNOTATE PROBE_IDs WITH ENSEMBL NAMES #####
#################################################



##### PREPARING LISTS TO BE USED ##### 

### List of species names 
##### !!! THIS NEEDS TO BE MANUALLY ESTABLISHED !!! ##### 
exp_species <- c("m", "r", "m", "m", "m", "r", "m", "m", "m", "m", "m", "m", "m", "m", "m", "m")

# The list object is needed for annotation of probes with ensembl names
LIST_DATA <- split(PRE_DATA, f = PRE_DATA$Paper) ###!!! <---

# How many Probe_IDs should we test to established appropriate microarray for given paper
Probe_IDs_to_test = 500

### We need to first check appropriate probe ids on smaller dataset and only then do actual annotation, because its too slow otherwise. Hence this shortened list !!! ADD RANDOM SELECTION OF ROWS! !!!
SHORT_LIST_DATA <- lapply(X = LIST_DATA, FUN = function(x){ x[1:Probe_IDs_to_test,] })

### Here we make list with number of lists equal to number of experiments
ANNOT_SHORT_LIST_DATA <- rep(list(list()), times = length(SHORT_LIST_DATA)) ###!!! <---

### This is just a help-list, it should probably be lower, when it is actually used
all_ID_annotations <- rep(list(list()), times = length(SHORT_LIST_DATA))

##### PREPARING LISTS TO BE USED ##### 



##### GET THE HIGHEST-HIT-RETURNING ID TYPE #####

for(n in seq_along(SHORT_LIST_DATA)){
  
  # Here we establish which mart(species) we are using in this given dataset based on "exp_species" vector
  ##### !!! THIS NEEDS TO BE MANUALLY ESTABLISHED !!! ##### 
  usedMart <- switch(exp_species[n], 
                     "m" = biomaRt::useMart("ENSEMBL_MART_ENSEMBL", dataset = "mmusculus_gene_ensembl"), 
                     "r" = biomaRt::useMart("ENSEMBL_MART_ENSEMBL", dataset = "rnorvegicus_gene_ensembl"))

  # Here we extract all the potential gene identifiers
  ##### !!! THIS MAY NEED FURTHER WORK !!! ##### 
  potental_identifiers <- c(usedMart@filters[grep(pattern = "^ensembl(.*)", usedMart@filters[[1]]) , 1], 
                             usedMart@filters[grep(pattern = "^refseq(.*)", usedMart@filters[[1]]) , 1], 
                             usedMart@filters[grep(pattern = "^affy(.*)", usedMart@filters[[1]]) , 1], 
                             usedMart@filters[grep(pattern = "^agilent(.*)", usedMart@filters[[1]]) , 1], 
                             usedMart@filters[grep(pattern = "^illumina(.*)", usedMart@filters[[1]]) , 1])
  
  # Here we are annotating given datasets with data from all the relevant databases
  for (m in seq_along(potental_identifiers)){
    ANNOT_SHORT_LIST_DATA[[n]][[m]] <- biomaRt::getBM(attributes = c(potental_identifiers[[m]], "external_gene_name"), 
                                  filters = potental_identifiers[[m]], 
                                  values = SHORT_LIST_DATA[[n]]$Probe_ID,
                                  uniqueRows = T,
                                  mart = usedMart
    )
  }
  
  # Here we save number of annotations from each ID
  for(k in seq_along(ANNOT_SHORT_LIST_DATA[[n]])) 
    {
    all_ID_annotations[[n]][[k]] <- length(ANNOT_SHORT_LIST_DATA[[n]][[k]][[1]])
    } }

# Lists inside main list are changed into dfs (vectors) as 'which' function demands it
df_all_ID_annotations <- lapply(all_ID_annotations, FUN = unlist)

# Here we will be returing results of appropriate microarray search
HIGHEST_HIT_LIST <- rep(list(list()), times = length(SHORT_LIST_DATA))

# Here we are getting all of the highest yielding IDs
for(n in seq_along(LIST_DATA)){
  for(m in seq_along(which(df_all_ID_annotations[[n]] == max(df_all_ID_annotations[[n]])))){
    HIGHEST_HIT_LIST[[n]][[m]] <- ANNOT_SHORT_LIST_DATA[[n]][[(which(df_all_ID_annotations[[n]] == max(df_all_ID_annotations[[n]]))[m])]]
  } }

# Cause we dont need it anymore, and this is the same data as "all_ID_annotations"
rm(df_all_ID_annotations)

# This is list allowing us to check how many hits did we get for highest-yielding feature for given experiment
check_annotation_percentage <- lapply(HIGHEST_HIT_LIST, FUN = function(x) {  length(x[[1]][[1]]) / Probe_IDs_to_test })

# Here we simply copy/establish names of features, that were highest by themselves
NAMES_HIGHEST_HIT_LIST <- lapply(X = HIGHEST_HIT_LIST, FUN = function(x) 
  { 
  if(length(x) == 1)
    {
    x <- names(x[[1]][1])
    } 
  } )

### Here we produce table with final names of annotation features to be used in actual annotation ###
### !!! MANUAL STEP - [[x]][[]][]- experiment, [[]][[x]][] - featureset, [[]][[]][x] - constant !!! ###
NAMES_HIGHEST_HIT_LIST[[3]] <- names(HIGHEST_HIT_LIST[[3]][[1]][1])
NAMES_HIGHEST_HIT_LIST[[6]] <- names(HIGHEST_HIT_LIST[[6]][[2]][1])
NAMES_HIGHEST_HIT_LIST[[7]] <- names(HIGHEST_HIT_LIST[[7]][[2]][1])
NAMES_HIGHEST_HIT_LIST[[8]] <- names(HIGHEST_HIT_LIST[[8]][[2]][1])
NAMES_HIGHEST_HIT_LIST[[13]] <- NA
NAMES_HIGHEST_HIT_LIST[[16]] <- NA

###### Here we estalish correct lists to analyzed in further steps (currently - need to remove experiments with microarrays not captured in ensembl) ######
WHICH_EXP_TO_ANAL <- seq(1,nrow(FOR_ANNOT_PLATFORMS))[which(!is.na(NAMES_HIGHEST_HIT_LIST))]

##### GET THE HIGHEST-HIT-RETURNING ID TYPE #####



###### PROBE_ID ANNOTATION WITH ENSEMBL GENE NAMES ###### 

ANNOT_LIST_DATA <- list()
for (n in WHICH_EXP_TO_ANAL){
  ANNOT_LIST_DATA[[n]] <- biomaRt::getBM(attributes = c(NAMES_HIGHEST_HIT_LIST[[n]], "external_gene_name"), 
                                filters = NAMES_HIGHEST_HIT_LIST[[n]], 
                                values = LIST_DATA[[n]]$Probe_ID,
                                uniqueRows = F,
                                mart = switch(exp_species[n], 
                                         "m" = biomaRt::useMart("ENSEMBL_MART_ENSEMBL", dataset = "mmusculus_gene_ensembl"), 
                                         "r" = biomaRt::useMart("ENSEMBL_MART_ENSEMBL", dataset = "rnorvegicus_gene_ensembl"))
  )
}

### !!! INTER-SPECIES GENE-NAME STANDARDIZATION? !!! ###

###### PROBE_ID ANNOTATION WITH ENSEMBL GENE NAMES ###### 



###### POST-PREPARATION OF ANNOTATED PROBE_ID TABLES ###### 

## HERE WE WILL COLLAPSE duplicated probe-genename pairs WITHIN ANNOTATED GENE LIST (and also change column names to standarized ones)
UNIQ_ANNOT_LIST_DATA <- list()
for (n in WHICH_EXP_TO_ANAL){
  UNIQ_ANNOT_LIST_DATA[[n]] <- unique(ANNOT_LIST_DATA[[n]])
  colnames(UNIQ_ANNOT_LIST_DATA[[n]]) <- c("Probe_ID", "ensembl_gene_name")
}

## Here we will collapse all gene names for given probe
for (n in WHICH_EXP_TO_ANAL){
  UNIQ_ANNOT_LIST_DATA[[n]] <- aggregate(ensembl_gene_name~Probe_ID, data = UNIQ_ANNOT_LIST_DATA[[n]], FUN = stringr::str_c) ## Here we aggregate the genenames into single row
  UNIQ_ANNOT_LIST_DATA[[n]]$ensembl_gene_name <- lapply(X = UNIQ_ANNOT_LIST_DATA[[n]]$ensembl_gene_name, FUN = paste, collapse = "; ") ##
  UNIQ_ANNOT_LIST_DATA[[n]]$ensembl_gene_name <- as.character(UNIQ_ANNOT_LIST_DATA[[n]]$ensembl_gene_name) ## Here we make sure that collapsed genename column is not a list (need for writing function)
}

# Je?eli w ensemble nie ma przypisanego genu (oznaczenie NA w przys?anym pliku "100_genow") to program pokazuje we wszystkich rubrykach oznaczenie NA chocia? te kom?rki zawiera?y wcze?niej dane (plik AAAreview11). W pe?nych danych kt?re przys?a?e? mi przed ?wi?tami (plik 1 znajduj?cy si? w skopresowanych danych "TEST_ANNOTATION") tych sond w og?le nie ma. Wygl?da na to, ?e to co przys?a?e? wczoraj odnosi si? chyba do wcze?niejszego pliku w kt?rym dane dla sond nie maj?cych przypisanego genu w ensemble zosta?y ca?kowicie usuni?te a to nie jest dobre :( - AMS W LIST_DATA S? TE DANE, ALE W TEST_ANNOTATION JUZ NIE

## Here we merge probes annotated with ensembl with probes data that we have
TEST_ANNOTATION <- list()
for (n in WHICH_EXP_TO_ANAL){
  TEST_ANNOTATION[[n]] <- merge(LIST_DATA[[n]], UNIQ_ANNOT_LIST_DATA[[n]], by = "Probe_ID", all.x = T)
}

## Here lets also remove empty lists
### !!! MANUAL SUPPLEMENTARY STEP - TO BE REMOVED IN FINAL VERSION, AS WE WILL NOT HAVE EMPTY LISTS !!! ###
TEST_ANNOTATION[[13]] <-NULL

# Here we bind all list elements into single data table
SINGLE_TEST_ANNOTATION <- data.table::data.table(rlist::list.rbind(TEST_ANNOTATION), stringsAsFactors = F)

### This will be our input data for further analysis. It contains only significant columns of "Paper", "GroupID", "ensembl_gene_name", "logFC": 
SHORT_SINGLE_TEST_ANNOTATION <- SINGLE_TEST_ANNOTATION %>%
  select("Paper", "GroupID", "ensembl_gene_name", "logFC") %>%
  group_by(Paper, GroupID, ensembl_gene_name) %>%
  nest()
  
# I dont know why purrr::map didnt work for this. Either way, we just lapply this. Here we write UP or DOWN for every logFC for given genename in given experiment (not paper)
SHORT_SINGLE_TEST_ANNOTATION$directionality <- lapply(X = SHORT_SINGLE_TEST_ANNOTATION$data, FUN = function(x) { mutate(x, Symbol_direction = ifelse(logFC > 0, "UP", "DOWN")) } ) 

# Here we count how many UPs and DOWNs are in every given genename in given experiment (not paper)
SHORT_SINGLE_TEST_ANNOTATION$directionality <- lapply(X = SHORT_SINGLE_TEST_ANNOTATION$directionality, FUN = function (x) {table(select(x, "Symbol_direction"))} ) 

# Here we establish actual status of gene in given experiment
SHORT_SINGLE_TEST_ANNOTATION$sum_directionality <- as.character(lapply(X = SHORT_SINGLE_TEST_ANNOTATION$directionality, 
                                               FUN = function(x) {
                                                 if (length(x) == 1 && grepl(pattern = "UP", names(x))) { "UP" }
                                                 else if (length(x) == 1 && grepl(pattern = "DOWN", names(x))) { "DOWN" }
                                                 else if (length(x) == 2 && grepl(pattern = "DOWN", names(x)) && grepl(pattern = "DOWN", names(x))) { "MIXED" }
                                                 else { "ERROR" }
                                               }))

# Here we remove MIXED expression and multiple genenames
FILT_SHORT_SINGLE_TEST_ANNOTATION <- SHORT_SINGLE_TEST_ANNOTATION %>%
  #filter(!grepl(pattern = "(.*);(.*)", SHORT_SINGLE_TEST_ANNOTATION$ensembl_gene_name)) %>%
  filter(!sum_directionality == "MIXED") %>%
  filter(!sum_directionality == "ERROR") %>%
  filter(!is.na(ensembl_gene_name))

# Here we add mean to each !!! Perhaps this should be final input, because it has: 1) removed genes giving UP+DOWN in the same experiment, 2) removed NAs
STDINPUT_FILT_SHORT_SIN_T_ANNO <- FILT_SHORT_SINGLE_TEST_ANNOTATION %>%
  mutate(mean = as.numeric(map(data, function(x) { as.numeric(mean(x[[1]]))} ))) %>% ## This way we give actuall vector to function, not a data table(tibble)
  select("Paper", "GroupID", "ensembl_gene_name", "sum_directionality", "mean") 
### !!! THE IDEA IS THAT THE "STDINPUT_FILT_SHORT_SIN_T_ANNO" IS THE INPUT FOR ALL FURTHER INQUIRIES !!! ###

# tO raczej nie wyjdzie - nie da się wyciągnąć właściwej wartości ekspresji z dwóch róznych eksperymentów w tym samym paper. Może lepiej po prostu dowiedzieć się, które geny są unikatowe dla danego paper i usunąć te geny z normalnie używanego wcześniej test annotation pliku. 

###### PAPER-CENTRIC ANALYSIS ###### 


#################################################
##### ANNOTATE PROBE_IDs WITH ENSEMBL NAMES #####
#################################################



######################
##### CLUSTERING #####
######################



UP3_ZEROED_CLU_STDINPUT_FILT_SHORT_SIN_T_ANNO <- FOR_CLUS(STDINPUT_FILT_SHORT_SIN_T_ANNO)
#readr::write_tsv(x = UP3_ZEROED_CLU_STDINPUT_FILT_SHORT_SIN_T_ANNO, path = "MULTIPLE_NAMES_INCLUDED_UP3_ZEROED_CLU_STDINPUT_FILT_SHORT_SIN_T_ANNO.tsv")
  
#Mamy tutaj dużo sond, które nie mają wartości w żadnym z eksperymentów. Czy to sondy natywne dla usuniętych dwóch eksperymentów, czy coś dziwnego się dzieje? - dzieje się to, że w oryginalnych danych są sondy, które mają log FC bliski zeru do dwóch miejsc po przecinku - 




### runibic ###

# Change the prepared data frame to matrix for clustering purposes
rownames(UP3_ZEROED_CLU_STDINPUT_FILT_SHORT_SIN_T_ANNO) <- UP3_ZEROED_CLU_STDINPUT_FILT_SHORT_SIN_T_ANNO$ensembl_gene_name
UP3_ZEROED_CLU_STDINPUT_FILT_SHORT_SIN_T_ANNO$ensembl_gene_name <- NULL
MATRIX_UP3_ZEROED_CLU_STDINPUT_FILT_SHORT_SIN_T_ANNO <- as.matrix(UP3_ZEROED_CLU_STDINPUT_FILT_SHORT_SIN_T_ANNO)


BiocManager::install(c("runibic", "biclust", "gplots"))
library(runibic)

runibicRES2 <- biclust::biclust(MATRIX_UP3_ZEROED_CLU_STDINPUT_FILT_SHORT_SIN_T_ANNO, method = runibic::BCUnibic())

dir.create("ClusterSummaryRunibic")

# Return figure representing which groups are included in which clusters
png(filename = paste0("ClusterSummaryRunibic/", names(MATRIX_UP3_ZEROED_CLU_STDINPUT_FILT_SHORT_SIN_T_ANNO), "_Cluster_Summary.png"), width = 1920, height = 1080, units = "px")
par(cex.axis = 1, oma=c(0,4,0,8))
biclust::biclustmember(runibicRES2, MATRIX_UP3_ZEROED_CLU_STDINPUT_FILT_SHORT_SIN_T_ANNO, main = names(MATRIX_UP3_ZEROED_CLU_STDINPUT_FILT_SHORT_SIN_T_ANNO))
dev.off()
# png(filename = paste0("ClusterSummaryRunibic/", the_names[n], "_Cluster_Summary.png"), width = 1920, height = 1080, units = "px")
# par(cex.axis = 1, oma=c(0,4,0,8))
# biclustmember(runibicRES2[[n]], matrixed_annot_the_list[[n]], main = the_names[n])
# dev.off()


# Shows which clusters are similar to other clusters (multidimensional scaling - similar to PCA)
png(filename = paste0("ClusterSummaryRunibic/", names(MATRIX_UP3_ZEROED_CLU_STDINPUT_FILT_SHORT_SIN_T_ANNO), "_Cluster_Relatedness.png"), width = 3840, height = 2160, units = "px")
biclust::bubbleplot(MATRIX_UP3_ZEROED_CLU_STDINPUT_FILT_SHORT_SIN_T_ANNO, runibicRES2, showLabels = T)
dev.off()

# This shows entire heatmap
par(cex.axis = 0.5)
biclust::heatmapBC(MATRIX_UP3_ZEROED_CLU_STDINPUT_FILT_SHORT_SIN_T_ANNO, runibicRES2)
axis(1, at=1:dim(MATRIX_UP3_ZEROED_CLU_STDINPUT_FILT_SHORT_SIN_T_ANNO)[2], labels = colnames(MATRIX_UP3_ZEROED_CLU_STDINPUT_FILT_SHORT_SIN_T_ANNO), las=2)
axis(2, at=1:dim(MATRIX_UP3_ZEROED_CLU_STDINPUT_FILT_SHORT_SIN_T_ANNO)[1], labels = rownames(MATRIX_UP3_ZEROED_CLU_STDINPUT_FILT_SHORT_SIN_T_ANNO), las=2)


biclust::drawHeatmap(MATRIX_UP3_ZEROED_CLU_STDINPUT_FILT_SHORT_SIN_T_ANNO, runibicRES2, number = 1, beamercolor = F, paleta = col_for_heatmaps(1000))



biclust::writeBiclusterResults(fileName = paste0("ClusterSummaryRunibic/", names(MATRIX_UP3_ZEROED_CLU_STDINPUT_FILT_SHORT_SIN_T_ANNO), "_ClustersRunibic.txt"), 
                      bicResult = runibicRES2, 
                      bicName = paste0(names(MATRIX_UP3_ZEROED_CLU_STDINPUT_FILT_SHORT_SIN_T_ANNO)),
                      geneNames = rownames(MATRIX_UP3_ZEROED_CLU_STDINPUT_FILT_SHORT_SIN_T_ANNO), 
                      arrayNames = colnames(MATRIX_UP3_ZEROED_CLU_STDINPUT_FILT_SHORT_SIN_T_ANNO),
                      append =FALSE, 
                      delimiter="\t")

### runibic ###



### hierachical ###

dist1 <- dist(x = MATRIX_UP3_ZEROED_CLU_STDINPUT_FILT_SHORT_SIN_T_ANNO, method = "euclidean")

hclust1 <- hclust(dist1, method="complete")



SHORT_MATRIX_UP3_ZEROED_CLU_STDINPUT_FILT_SHORT_SIN_T_ANNO <- MATRIX_UP3_ZEROED_CLU_STDINPUT_FILT_SHORT_SIN_T_ANNO[1:100,]


# For server
# UP3 <- read.delim("UP3_ZEROED_CLU_STDINPUT_FILT_SHORT_SIN_T_ANNO.tsv", header = T, sep = "\t")
# rownames(UP3) <- UP3$ensembl_gene_name
# UP3$ensembl_gene_name <- NULL
# UP3 <- as.matrix(UP3)
# ../cluster -f UP3_ZEROED_CLU_STDINPUT_FILT_SHORT_SIN_T_ANNO.tsv -m a -g 2 

pdf("heatmap.pdf", pointsize = 4)
gplots::heatmap.2(SHORT_MATRIX_UP3_ZEROED_CLU_STDINPUT_FILT_SHORT_SIN_T_ANNO, 
        distfun = function (x) { dist(x, ) }, 
        hclustfun = function (x) { hclust(x, method = "average") },
        trace = "none"
)
dev.off()

png(filename = "heatmap.png", width = 3840, height = 2160, units = "px")
heatmap(UP3)
dev.off()

png(filename = "plot.png", width = 3840, height = 2160, units = "px")
plot(hclust1)
dev.off()

install.packages("proxy")

simil1 <- proxy::simil(UP3)
png(filename = "_heatmap.png", width = 3840, height = 2160, units = "px")
heatmap(simil1)
dev.off()

# For server




plot(hclust1)
heatmap(SHORT_MATRIX_UP3_ZEROED_CLU_STDINPUT_FILT_SHORT_SIN_T_ANNO)


TOTAL_GENE_COUNT_PER_EXPERIMENT <- as.tibble(SINGLE_TEST_ANNOTATION) %>%
  group_by(ensembl_gene_name) %>%
  summarise(n())

TOTAL_GENE_COUNT_PER_PUBLICATION <- as.tibble(SINGLE_TEST_ANNOTATION) %>%
  group_by(Paper) %>%
  group_by(ensembl_gene_name) %>%
  summarise(n())


######################
##### CLUSTERING #####
######################








##############################################################
##############################################################
##############################################################







###### WHOLE DATASET ANALYSIS ######

# Tutaj liczymy ile razy geny wystepuja w oryginalnym dataset (w eksperymentach, nie w paperach)
HOW_MANY_TIMES_EXP_STDINPUT <- STDINPUT_FILT_SHORT_SIN_T_ANNO %>%
  select(ensembl_gene_name) %>%
  group_by(ensembl_gene_name) %>%
  summarise(number = n())

# Tutaj liczymy ile razy geny wystepuja w oryginalnym dataset (w paperach)
HOW_MANY_TIMES_PAPER_STDINPUT <- STDINPUT_FILT_SHORT_SIN_T_ANNO %>%
  select(Paper, ensembl_gene_name) %>%
  unique() %>%
  select(ensembl_gene_name) %>%
  group_by(ensembl_gene_name) %>%
  summarise(number = n())

###### Tutaj robimy specjalny input do klastrowania, w którym używamy tylko genów, które zostały wykryte przynajmniej w 3 oddzielnych paperach ###### 
UP3_HOW_MANY_TIMES_PAPER_STDINPUT <- HOW_MANY_TIMES_PAPER_STDINPUT %>%
  filter(number >= 3)

UP3_PAPER_CLUSTERING_INPUT <- merge(STDINPUT_FILT_SHORT_SIN_T_ANNO, UP3_HOW_MANY_TIMES_PAPER_STDINPUT, by = "ensembl_gene_name", all.y = T)

FOR_CLUST_UP3_PAPER_CLUSTERING_INPUT <- UP3_PAPER_CLUSTERING_INPUT %>%
  FOR_CLUS()
#readr::write_tsv(x = FOR_CLUST_UP3_PAPER_CLUSTERING_INPUT, path = "FOR_CLUST_UP3_PAPER_CLUSTERING_INPUT.tsv")  









###### Tutaj robimy specjalny input do klastrowania, w którym używamy tylko genów, które zostały wykryte przynajmniej w 3 oddzielnych paperach ###### 


# Tutaj liczymy ile razy geny wyst?puj? w oryginalnym dataset, patrz?c czy s? up czy down
UorDWHOLE_NO_UNIDS_ORG_DATA <- NO_UNIDS_ORG_DATA %>%
  select(Gene_symbol, logFC) %>%
  mutate(Symbol_direction = ifelse(logFC > 0, "UP", "DOWN")) %>%
  mutate(Symbol_direction = paste(Gene_symbol, Symbol_direction, sep = "_")) %>%
  group_by(Symbol_direction) %>%
  summarise(number = n()) %>% 
  mutate(Gene_symbol2 = str_remove(Symbol_direction, "_.*"))

###### WHOLE DATASET ANALYSIS ######



###### COMPARISONS-CENTERED ANALYSIS ######



### Here we set whether we want to analyze papers or comparisons
P_or_C = quo(Paper) #" GroupID OR Paper "



# Tutaj liczymy ile razy geny wyst?puj? W KA?DYM Z POR?WNA?, nie patrz?c czy s? up czy down
COMP_NO_UNIDS_ORG_DATA <- NO_UNIDS_ORG_DATA %>%
  select(!!P_or_C, Gene_symbol) %>%
  group_by(!!P_or_C, Gene_symbol) %>%
  summarise(number = n())



# Tutaj liczymy ile razy geny wyst?puj? W KA?DYM Z POR?WNA?, patrz?c czy s? up czy down    
UorDCOMP_NO_UNIDS_ORG_DATA <- NO_UNIDS_ORG_DATA %>%
  select(!!P_or_C, Gene_symbol, logFC) %>%
  mutate(Symbol_direction = ifelse(logFC > 0, "UP", "DOWN")) %>%
  mutate(Symbol_direction = paste(Gene_symbol, Symbol_direction, sep = "_")) %>%
  group_by(!!P_or_C, Symbol_direction) %>%
  summarise(Sym_dir_number = n()) %>%
  mutate(Gene_symbol2 = str_remove(Symbol_direction, "_.*"))



#Divide data into genes expressed in single direction in given comparison, vs genes expressed in different direction (bad genes)
nonUNIQ_UorDCOMP_NO_UNIDS_ORG_DATA <- UorDCOMP_NO_UNIDS_ORG_DATA %>%
  group_by(!!P_or_C) %>%
  filter(duplicated(Gene_symbol2, fromLast = T) | duplicated(Gene_symbol2))

UNIQ_UorDCOMP_NO_UNIDS_ORG_DATA <- UorDCOMP_NO_UNIDS_ORG_DATA %>%
  group_by(!!P_or_C) %>%
  filter(!duplicated(Gene_symbol2, fromLast = T) & !duplicated(Gene_symbol2))



# Check if unique/duplicated division went well           
if (nrow(UorDCOMP_NO_UNIDS_ORG_DATA) - (nrow(nonUNIQ_UorDCOMP_NO_UNIDS_ORG_DATA) + nrow(UNIQ_UorDCOMP_NO_UNIDS_ORG_DATA)) != 0){ 
  stop("Hey, fwend! You have some wierd values in Your counted data, buddy! Better check whats happening, or Your results will smell of moose scrotum!")
}



# Here we make a table only with genes that were replicated in few comparisons
REPL_UNIQ_UorDCOMP_NO_UNIDS_ORG_DATA <- UNIQ_UorDCOMP_NO_UNIDS_ORG_DATA %>%
  filter(Sym_dir_number >= 3)


#Annotate base on Paper OR GroupID
ANNO_REPL_UNIQ_UorDCOMP_NO_UNIDS_ORG_DATA <- merge(REPL_UNIQ_UorDCOMP_NO_UNIDS_ORG_DATA, COMPARISONS, by = "Paper")


###### COMPARISONS-CENTERED ANALYSIS ######
